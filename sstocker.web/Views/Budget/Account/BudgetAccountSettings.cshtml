@{
    Layout = "_budgetLayout";
    ViewBag.Title = "Account Settings";
    ViewBag.AccountName = Model.AccountName;
    ViewBag.AccountImage = Model.AccountImage;
}

@model sstocker.budget.ViewModels.AccountSettingsViewModel

<html>
<body>
    @if (Model.HasSharedAccount)
    {
        @if (Model.SharedAccountSettings)
        {
            <h2>Shared Account Settings</h2>
            <h4>@Html.ActionLink("Go to Personal Settings", "Settings", "BudgetAccountSettings", new { shared = false })</h4>
        }
        else
        {
            <h2>Personal Account Settings</h2>
            <h4>@Html.ActionLink("Go to Shared Settings", "Settings", "BudgetAccountSettings", new { shared = true })</h4>
        }
    }
    else
    {
        <h2>Account Settings</h2>
    }

    @foreach (var item in Model.Categories)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    Categories - @item.Name
                </h6>
            </div>
            <div>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group">
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" checked="@item.Setting.IsActive" id="@(item.Name)_IsActive" name="@(item.Name)_IsActive" onclick="onCheckboxChecked('@item.Name')" />
                            <label class="custom-control-label" id="@(item.Name)_Label" name="@(item.Name)_Label" for="@(item.Name)_IsActive">Is Active</label>
                        </div>
                    </div>
                </div>
                <div id="@(item.Name)_Hidden_Values" name="@(item.Name)_Hidden_Values" style="@(item.Setting.IsActive ? "display: block;" : "display: none;")">
                    <div class="form-row">
                        <div class="form-group">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" checked="@item.Setting.IsCritical" id="@(item.Name)_IsCritical" name="@(item.Name)_IsCritical" />
                                <label class="custom-control-label" id="@(item.Name)_IsCritical_Label" name="@(item.Name)_IsCritical_Label" for="@(item.Name)_IsCritical">Is Critical</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" checked="@item.Setting.Unlimited" id="@(item.Name)_Unlimited" name="@(item.Name)_Unlimited" onclick="activateAmountBox('@item.Name')" />
                                <label class="custom-control-label" id="@(item.Name)_Unlimited_Label" name="@(item.Name)_Unlimited_Label" for="@(item.Name)_Unlimited">Unlimited Budget</label>
                            </div>
                        </div>
                    </div>

                    <div id="@(item.Name)_Amount_Hidden_Values" name="@(item.Name)_Amount_Hidden_Values" style="@(item.Setting.Unlimited ? "display: none;" : "display: block;")">
                        <div class="form-row">
                            <div class="form-group">
                                <label id="@(item.Name)_Amount_Label" name="@(item.Name)_Amount_Label" for="@(item.Name)_Amount">Category Budget Amount:</label><br />
                                <div style="margin-left: 10px;" class="dollar"><input type="number" min="1" step="1" value="@item.Setting.Amount" id="@(item.Name)_Amount" name="@(item.Name)_Amount" /></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label id="@(item.Name)_Duration_Label" name="@(item.Name)_Duration_Label" for="@(item.Name)_Duration">Budget Duration: </label>
                            <div class="radio-toolbar" id="@(item.Name)_Duration" name="@(item.Name)_Duration">
                                @foreach (sstocker.budget.Enums.Duration duration in Enum.GetValues(typeof(sstocker.budget.Enums.Duration)))
                                {
                                    <input type="radio" id="@(item.Name)_Duration_@(duration)" name="@(item.Name)_Duration" value="@duration" @(item.Setting.Duration == duration ? "checked" : "")>
                                    <label for="@(item.Name)_Duration_@(duration)">@duration.ToString()</label>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                Expense Summary
            </h6>
        </div>
        <div>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group">
                    <label id="@(Model.ExpenseSummary.Name)_Label" name="@(Model.ExpenseSummary.Name)_Label" for="@(Model.ExpenseSummary.Name)">Default Time Period: </label>
                    <div class="radio-toolbar" id="@(Model.ExpenseSummary.Name)" name="@(Model.ExpenseSummary.Name)">
                        @foreach (sstocker.budget.Enums.ExpenseSummaryTimePeriod timePeriod in Enum.GetValues(typeof(sstocker.budget.Enums.ExpenseSummaryTimePeriod)))
                        {
                            <input type="radio" id="@(Model.ExpenseSummary.Name)_@(timePeriod)" name="@(Model.ExpenseSummary.Name)" value="@timePeriod" @(Model.ExpenseSummary.Setting == timePeriod ? "checked" : "")>
                            <label for="@(Model.ExpenseSummary.Name)_@(timePeriod)">@timePeriod.ToString()</label>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                Email Settings
            </h6>
        </div>
        <div>
        </div>
        <div class="card-body">
            <div class="form-row">
                <div class="form-group">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" checked="@Model.Email.Setting.SendWeeklyEmail" id="@(Model.Email.Name)_SendEmail_Weekly" name="@(Model.Email.Name)_SendEmail_Weekly" />
                        <label class="custom-control-label" id="@(Model.Email.Name)_SendEmail_Weekly_Label" name="@(Model.Email.Name)_SendEmail_Weekly_Label" for="@(Model.Email.Name)_SendEmail_Weekly">Send Weekly Email</label>
                    </div>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" checked="@Model.Email.Setting.SendMonthlyEmail" id="@(Model.Email.Name)_SendEmail_Monthly" name="@(Model.Email.Name)_SendEmail_Monthly" />
                        <label class="custom-control-label" id="@(Model.Email.Name)_SendEmail_Monthly_Label" name="@(Model.Email.Name)_SendEmail_Monthly_Label" for="@(Model.Email.Name)_SendEmail_Monthly">Send Monthly Email</label>
                    </div>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" checked="@Model.Email.Setting.SendReminderEmail" id="@(Model.Email.Name)_SendEmail_Reminder" name="@(Model.Email.Name)_SendEmail_Reminder" />
                        <label class="custom-control-label" id="@(Model.Email.Name)_SendEmail_Reminder_Label" name="@(Model.Email.Name)_SendEmail_Reminder_Label" for="@(Model.Email.Name)_SendEmail_Reminder">Send Reminder Email</label>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label id="@(Model.Email.Name)_Email_Label" name="@(Model.Email.Name)_Email_Label" for="@(Model.Email.Name)_Email">Email Address:</label><br />
                <input type="text" value="@Model.Email.Setting.Email" id="@(Model.Email.Name)_Email" name="@(Model.Email.Name)_Email" />
            </div>
        </div>
    </div>

    <br />
    <span class="btn btn-primary" style="width: 100%" onclick="Save()">Save</span>
    <br />
    <br />
    <span class="btn btn-secondary" style="width: 100%" onclick="window.location.href='@Url.Action("Dashboard", "BudgetHome")';">Cancel</span>
    <br />
    <br />

    <script>
        function onCheckboxChecked(name) {
            var checkBox = document.getElementById(name + "_IsActive");
            var hiddenValuesDiv = document.getElementById(name + "_Hidden_Values");
            if (checkBox.checked == true){
                hiddenValuesDiv.style.display = "block";
            } else {
                hiddenValuesDiv.style.display = "none";
            }
        }

        function activateAmountBox(name) {
            var checkBox = document.getElementById(name + "_Unlimited");
            var hiddenValuesDiv = document.getElementById(name + "_Amount_Hidden_Values");
            if (checkBox.checked == true) {
                hiddenValuesDiv.style.display = "none";
            } else {
                hiddenValuesDiv.style.display = "block";
            }
        }

        function Save() {
            $.ajax(
                {
                    type: "POST",
                    url: '@Url.Action("SaveSettings", "BudgetAccountSettings")',
                    data: {
                        model: @Html.Raw(@Model.GetHtmlValues()),
                        isSharedAccount: '@Model.SharedAccountSettings'
                    },
                    error: function () {
                        alert("There is a Problem, Try Again!");
                    },
                    success: function (result) {
                        if (result.status == true) {
                            window.location.href = '@Url.Action("Dashboard", "BudgetHome")';
                        }
                        else {
                            alert(result.message);
                        }
                    }
                });
        }
    </script>
    <style>
        .radio-toolbar {
            margin-left: 10px;
            margin-right: 10px;
        }

            .radio-toolbar input[type="radio"] {
                opacity: 0;
                position: fixed;
                width: 0;
            }

            .radio-toolbar label {
                display: inline-block;
                background-color: #ddd;
                padding: 10px;
                width: 100px;
                text-align: center;
                font-family: sans-serif, Arial;
                font-size: 12px;
                border: 2px solid #444;
                border-radius: 4px;
            }

                .radio-toolbar label:hover {
                    background-color: #a6b9ef;
                    color: white;
                }

            .radio-toolbar input[type="radio"]:focus + label {
                border: 2px dashed #d2dbf7;
            }

            .radio-toolbar input[type="radio"]:checked + label {
                background-color: #4E73DF;
                color: white;
                border-color: #a6b9ef;
            }

        .dollar {
            display: inline-block;
            position: relative;
        }

            .dollar input {
                padding-left: 15px;
            }

            .dollar:before {
                position: absolute;
                content: "$";
                left: 5px;
                top: 2.5px;
            }
    </style>
</body>
</html>