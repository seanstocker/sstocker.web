@{
    Layout = "_budgetLayout";
    ViewBag.Title = "Dashboard";
    ViewBag.AccountName = Model.AccountName;
    ViewBag.AccountImage = Model.AccountImage;
}
@model sstocker.budget.ViewModels.DashboardModel
<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
    <div>
        <a href="@Url.Action("AddExpense", "Expense")" class="d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i class="fas fa-plus fa-sm text-white-50"></i> Add Expense</a>
        <a href="@Url.Action("AddIncome", "Income")" class="d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i class="fas fa-plus fa-sm text-white-50"></i> Add Income</a>
    </div>
</div>
@if (Model.Shared.HasSharedAccount)
{
    @if (Model.Shared.SharedDashboard)
    {
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h5><a href="@Url.Action("Index", "Home")">Go to Personal Dashboard</a></h5>
        </div>
    }
    else
    {
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h5><a href="@Url.Action("Index", "Home", new { shared = true })">Go to Shared Dashboard</a></h5>
        </div>
    }
}

<!-- Content Row -->
<div class="row">

    <!-- Spent (Today) Card -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Spent (Today)</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">$@Model.SpentToday.ToString("#,###,##0.00")</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Spent (This Week) Card -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-success shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Spent (This Week)</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">$@Model.SpentThisWeek.ToString("#,###,##0.00")</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Spent (This Month) Card -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-info shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Spent (This Month)</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">$@Model.SpentThisMonth.ToString("#,###,##0.00")</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Spent (This Year) Card -->
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-warning shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Spent (This Year)</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">$@Model.SpentThisYear.ToString("#,###,##0.00")</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<!-- Content Row -->
<div class="row">

    <!-- Area Chart -->
    <div class="col-xl-8 col-lg-7">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary"><a href="@Url.Action("ExpenseSummary", "Expense")">Expenses Overview</a></h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="chart-area">
                    <canvas id="myAreaChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Pie Chart -->
    <div class="col-xl-4 col-lg-5">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Expenses By Category</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="chart-pie pt-4 pb-2">
                    <canvas id="myPieChart"></canvas>
                </div>
                <div class="mt-4 text-center small">
                    @for (int x = 0; x < Model.PieChart.Labels.Count; x++)
                    {
                        <span class="mr-2">
                            <i class="fas fa-circle" style="color: @Model.GetPrimaryColor(x)"></i> @Model.PieChart.Labels[x]
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

<!-- Content Row -->
<div class="row">
    <div class="col-lg-12 mb-4">
        <!-- Project Card Example -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary"><a href="@Url.Action("BudgetSummary", "Expense")">Budget Overview</a></h6>
            </div>
            <div class="card-body">
                @for (int x = 0; x < Model.BudgetOverviewList.Count; x++)
                {
                    <h4 class="small font-weight-bold">@Model.BudgetOverviewList[x].Name (@Model.BudgetOverviewList[x].Duration)<span class="float-right">@Model.BudgetOverviewList[x].PercentageUsed%</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar @Model.BudgetOverviewList[x].GetPercentageClassName()" role="progressbar" style="width: @Model.BudgetOverviewList[x].PercentageUsed%" aria-valuenow="@Model.BudgetOverviewList[x].PercentageUsed" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.Shared.HasSharedAccount && !Model.Shared.SharedDashboard && Model.Shared.OweAmount.Any())
{
    <!-- Content Row -->
    <div class="row">
        <div class="col-lg-12 mb-4">
            <!-- Project Card Example -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Partner Account Standing</h6>
                </div>
                <div class="card-body">
                    @for (int x = 0; x < Model.Shared.OweAmount.Count; x++)
                    {
                        @if (Model.Shared.OweAmount[x].OweAmount == 0)
                        {
                            <p>Neither of you owe anything to each other for the month of @Model.Shared.OweAmount[x].Month.ToString("MMMM yyyy")</p>
                        }
                        else if (Model.Shared.OweAmount[x].OweAmount > 0)
                        {
                            <p>You owe @Model.Shared.PartnerName $@Math.Abs(Model.Shared.OweAmount[x].OweAmount) for the month of @Model.Shared.OweAmount[x].Month.ToString("MMMM yyyy")</p>
                        }
                        else if (Model.Shared.OweAmount[x].OweAmount < 0)
                        {
                            <p>@Model.Shared.PartnerName owes you $@Math.Abs(Model.Shared.OweAmount[x].OweAmount) for the month of @Model.Shared.OweAmount[x].Month.ToString("MMMM yyyy")</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>
<script>
    $(document).ready(function () {
        createLineChart();
        createPieChart();
    });

    function createLineChart() {
        // Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';

        // Area Chart Example
        var ctx = document.getElementById("myAreaChart");
        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Json.Serialize(@Model.ExpensesLineChart.Labels),
                datasets: [
                    {
                        label: "Expenses",
                        lineTension: 0.3,
                        backgroundColor: "#00000000",
                        borderColor: "@Model.GetPrimaryColor(0)",
                        pointRadius: 3,
                        pointBackgroundColor: "@Model.GetPrimaryColor(0)",
                        pointBorderColor: "@Model.GetPrimaryColor(0)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "@Model.GetPrimaryColor(0)",
                        pointHoverBorderColor: "@Model.GetPrimaryColor(0)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: @Json.Serialize(Model.ExpensesLineChart.Amounts)
                    },
                    {
                        label: "Income",
                        lineTension: 0.3,
                        backgroundColor: "#00000000",
                        borderColor: "@Model.GetPrimaryColor(1)",
                        pointRadius: 3,
                        pointBackgroundColor: "@Model.GetPrimaryColor(1)",
                        pointBorderColor: "@Model.GetPrimaryColor(1)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "@Model.GetPrimaryColor(1)",
                        pointHoverBorderColor: "@Model.GetPrimaryColor(1)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: @Json.Serialize(Model.IncomeLineChart.Amounts)
                    }]
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'date'
                        },
                        gridLines: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            // Include a dollar sign in the ticks
                            callback: function (value, index, values) {
                                return '$' + number_format(value);
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    }],
                },
                legend: {
                    display: false
                },
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    titleMarginBottom: 10,
                    titleFontColor: '#6e707e',
                    titleFontSize: 14,
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    intersect: false,
                    mode: 'index',
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': $' + number_format(tooltipItem.yLabel);
                        }
                    }
                }
            }
        });
    }

    function createPieChart() {// Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';

        // Pie Chart Example
        var ctx = document.getElementById("myPieChart");
        var myPieChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: @Json.Serialize(Model.PieChart.Labels),
                datasets: [{
                    data: @Json.Serialize(Model.PieChart.Amounts),
                    backgroundColor: @Json.Serialize(Model.GetPrimaryColors(Model.PieChart.GetCount())),
                    hoverBackgroundColor: @Json.Serialize(Model.GetSecondaryColors(Model.PieChart.GetCount())),
                    hoverBorderColor: "rgba(234, 236, 244, 1)",
                }],
            },
            options: {
                maintainAspectRatio: false,
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    caretPadding: 10,
                },
                legend: {
                    display: false
                },
                cutoutPercentage: 80,
            },
        });
    }

    function number_format(number, decimals, dec_point, thousands_sep) {
        // *     example: number_format(1234.56, 2, ',', ' ');
        // *     return: '1 234,56'
        number = (number + '').replace(',', '').replace(' ', '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.round(n * k) / k;
            };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
</script>